import streamlit as st
import pandas as pd
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title='üìä An√°lise de Uso de M√≠dias Sociais',
    page_icon='üöÄ',
    layout='wide'
)

# Carregar os dados do arquivo
df_socialmedia = pd.read_csv('socialmedia.csv')

# Corre√ß√£o de poss√≠veis erros de digita√ß√£o nos nomes das colunas
df_socialmedia.rename(columns={'UsageDuraiton': 'UsageDuration'}, inplace=True)

# Personaliza√ß√£o da dashboard
st.markdown("<h1 style='text-align: center; color: #00FF7F;'>üöÄ An√°lise de Uso de M√≠dias Sociais üöÄ</h1>", unsafe_allow_html=True)

with st.sidebar:
    st.header('üéõÔ∏è Filtros')
    
    # Filtro - pa√≠s
    countries = df_socialmedia['Country'].unique()
    selected_countries = st.multiselect('üåç Selecione os pa√≠ses:', countries, default=countries)
    
    # Filtro - faixa et√°ria
    min_age = int(df_socialmedia['Age'].min())
    max_age = int(df_socialmedia['Age'].max())
    age_range = st.slider('üë• Selecione a faixa et√°ria:', min_value=min_age, max_value=max_age, value=(min_age, max_age))

# Filtro -pa√≠s e idade
df_filtered = df_socialmedia[
    (df_socialmedia['Country'].isin(selected_countries)) &
    (df_socialmedia['Age'] >= age_range[0]) &
    (df_socialmedia['Age'] <= age_range[1])
]

age_bins = [0, 18, 25, 35, 50, 65, 100]
if age_bins != sorted(age_bins):
    st.error('..')
else:
    age_labels = ['At√© 18', '19-25', '26-35', '36-50', '51-65', 'Acima de 65']
    df_filtered['Faixa Et√°ria'] = pd.cut(df_filtered['Age'], bins=age_bins, labels=age_labels, include_lowest=True)

    # Calcular a m√©dia //CORRIGIDO
    avg_usage_by_age_group = df_filtered.groupby('Faixa Et√°ria')['UsageDuration'].mean().reset_index()
    avg_usage_by_age_group['UsageDuration'].fillna(0, inplace=True)

    def format_duration(minutes):
        if pd.isnull(minutes) or minutes == 0:
            return '0 min'
        hours = int(minutes // 60)
        minutes = int(minutes % 60)
        if hours > 0:
            return f'{hours} h {minutes} min'
        else:
            return f'{minutes} min'

    avg_usage_by_age_group['Dura√ß√£o M√©dia'] = avg_usage_by_age_group['UsageDuration'].apply(format_duration)
    st.subheader('')

    # Gr√°fico 1: Tempo Total de Uso por Pa√≠s 
    st.markdown("### üåç Tempo Total de Uso por Pa√≠s")
    country_usage = df_filtered.groupby('Country')['UsageDuration'].sum().reset_index()
    country_usage = country_usage.sort_values(by='UsageDuration', ascending=False)
    fig_country_usage = px.bar(
        country_usage,
        x='Country',
        y='UsageDuration',
        color='UsageDuration',
        color_continuous_scale='Blues',
        labels={'Country': 'Pa√≠s', 'UsageDuration': 'Dura√ß√£o Total de Uso (minutos)'},
        template='plotly_dark'
    )
    st.plotly_chart(fig_country_usage, use_container_width=True)

    # Gr√°fico 2: M√©dia de Dura√ß√£o de Uso por Faixa Et√°ria // CORRIGIDO P√ìS AVALIA√á√ÉO
    st.markdown("### üë• M√©dia de Dura√ß√£o de Uso por Faixa Et√°ria")
    fig_age_group = px.bar(
        avg_usage_by_age_group,
        x='Faixa Et√°ria',
        y='UsageDuration',
        color='UsageDuration',
        color_continuous_scale='Purples',
        labels={'Faixa Et√°ria': 'Faixa Et√°ria', 'UsageDuration': 'Dura√ß√£o M√©dia (minutos)'},
        template='plotly_dark',
        text='Dura√ß√£o M√©dia'
    )
    fig_age_group.update_traces(textposition='outside')
    st.plotly_chart(fig_age_group, use_container_width=True)

    # Gr√°fico 3: Total de Usu√°rios por Faixa Et√°ria //CORRIGIDO P√ìS AVALIA√á√ÉO
    st.markdown("### üìà Total de Usu√°rios por Faixa Et√°ria")
    users_by_age_group = df_filtered.groupby('Faixa Et√°ria')['UserId'].nunique().reset_index()
    users_by_age_group = users_by_age_group.sort_values('Faixa Et√°ria')
    fig_users_age = px.bar(
        users_by_age_group,
        x='Faixa Et√°ria',
        y='UserId',
        color='UserId',
        color_continuous_scale='Greens',
        labels={'Faixa Et√°ria': 'Faixa Et√°ria', 'UserId': 'N√∫mero de Usu√°rios'},
        template='plotly_dark'
    )
    st.plotly_chart(fig_users_age, use_container_width=True)

    # Gr√°fico 4: Idade vs Dura√ß√£o de Uso // CORRIGIDO P√ìS AVALIA√á√ÉO
    st.markdown("### üìä Idade vs Dura√ß√£o de Uso")
    age_usage = df_filtered.groupby('Age')['UsageDuration'].mean().reset_index()
    fig_age_usage = px.bar(
        age_usage,
        x='Age',
        y='UsageDuration',
        color='UsageDuration',
        color_continuous_scale='Turbo',
        labels={'Age': 'Idade', 'UsageDuration': 'Dura√ß√£o M√©dia de Uso (hora)'},
        template='plotly_dark'
    )
    st.plotly_chart(fig_age_usage, use_container_width=True)

    # rodap√© bonitinho
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("<p style='text-align: center;'>Atividade de Probabilidade e Estatistica por Renan e Elissandra - 2024</p>", unsafe_allow_html=True)
